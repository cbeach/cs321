/* Generated By:JavaCC: Do not edit this line. miniParser0Constants.java */
package parser0;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface miniParser0Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT = 5;
  /** RegularExpression Id. */
  int ML_COMMENT = 6;
  /** RegularExpression Id. */
  int BOOLEAN = 7;
  /** RegularExpression Id. */
  int CLASS = 8;
  /** RegularExpression Id. */
  int ELSE = 9;
  /** RegularExpression Id. */
  int EXTENDS = 10;
  /** RegularExpression Id. */
  int FALSE = 11;
  /** RegularExpression Id. */
  int IF = 12;
  /** RegularExpression Id. */
  int INT = 13;
  /** RegularExpression Id. */
  int LENGTH = 14;
  /** RegularExpression Id. */
  int MAIN = 15;
  /** RegularExpression Id. */
  int NEW = 16;
  /** RegularExpression Id. */
  int PUBLIC = 17;
  /** RegularExpression Id. */
  int RETURN = 18;
  /** RegularExpression Id. */
  int STATIC = 19;
  /** RegularExpression Id. */
  int THIS = 20;
  /** RegularExpression Id. */
  int TRUE = 21;
  /** RegularExpression Id. */
  int VOID = 22;
  /** RegularExpression Id. */
  int WHILE = 23;
  /** RegularExpression Id. */
  int STRING = 24;
  /** RegularExpression Id. */
  int SYSTEM_OUT_PRINTLN = 25;
  /** RegularExpression Id. */
  int STRING_LITERAL = 26;
  /** RegularExpression Id. */
  int DIGIT = 27;
  /** RegularExpression Id. */
  int LETTER = 28;
  /** RegularExpression Id. */
  int ID = 29;
  /** RegularExpression Id. */
  int NUM = 30;
  /** RegularExpression Id. */
  int REAL = 31;
  /** RegularExpression Id. */
  int ASSIGN = 32;
  /** RegularExpression Id. */
  int PLUS = 33;
  /** RegularExpression Id. */
  int MINUS = 34;
  /** RegularExpression Id. */
  int MULT = 35;
  /** RegularExpression Id. */
  int DIV = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int OR = 38;
  /** RegularExpression Id. */
  int NOT = 39;
  /** RegularExpression Id. */
  int EQL = 40;
  /** RegularExpression Id. */
  int NOT_EQL = 41;
  /** RegularExpression Id. */
  int LESS_THAN = 42;
  /** RegularExpression Id. */
  int GREATER_OR_EQL = 43;
  /** RegularExpression Id. */
  int GRETER_THAN = 44;
  /** RegularExpression Id. */
  int GRETER_OR_EQL = 45;
  /** RegularExpression Id. */
  int DELIMITER = 46;
  /** RegularExpression Id. */
  int COMMA = 47;
  /** RegularExpression Id. */
  int PERIOD = 48;
  /** RegularExpression Id. */
  int LPAREN = 49;
  /** RegularExpression Id. */
  int RPAREN = 50;
  /** RegularExpression Id. */
  int L_SQUARE_BRACKET = 51;
  /** RegularExpression Id. */
  int R_SQUARE_BRACKET = 52;
  /** RegularExpression Id. */
  int L_CURLY_BRACKET = 53;
  /** RegularExpression Id. */
  int R_CURLY_BRACKET = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<COMMENT>",
    "<ML_COMMENT>",
    "\"boolean\"",
    "\"class\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"if\"",
    "\"int\"",
    "\"length\"",
    "\"main\"",
    "\"new\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"this\"",
    "\"true\"",
    "\"void\"",
    "\"while\"",
    "\"String\"",
    "\"System.out.println\"",
    "<STRING_LITERAL>",
    "<DIGIT>",
    "<LETTER>",
    "<ID>",
    "<NUM>",
    "<REAL>",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
  };

}
