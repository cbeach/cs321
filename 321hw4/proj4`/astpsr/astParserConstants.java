/* Generated By:JavaCC: Do not edit this line. astParserConstants.java */
package astpsr;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface astParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ArrayElm = 6;
  /** RegularExpression Id. */
  int ArrayLen = 7;
  /** RegularExpression Id. */
  int ArrayType = 8;
  /** RegularExpression Id. */
  int Assign = 9;
  /** RegularExpression Id. */
  int BoolType = 10;
  /** RegularExpression Id. */
  int Binop = 11;
  /** RegularExpression Id. */
  int Block = 12;
  /** RegularExpression Id. */
  int Call = 13;
  /** RegularExpression Id. */
  int CallStmt = 14;
  /** RegularExpression Id. */
  int ClassDecl = 15;
  /** RegularExpression Id. */
  int ClassDeclList = 16;
  /** RegularExpression Id. */
  int Exp = 17;
  /** RegularExpression Id. */
  int ExpList = 18;
  /** RegularExpression Id. */
  int False = 19;
  /** RegularExpression Id. */
  int Formal = 20;
  /** RegularExpression Id. */
  int FormalList = 21;
  /** RegularExpression Id. */
  int Id = 22;
  /** RegularExpression Id. */
  int If = 23;
  /** RegularExpression Id. */
  int Int = 24;
  /** RegularExpression Id. */
  int IntType = 25;
  /** RegularExpression Id. */
  int Member = 26;
  /** RegularExpression Id. */
  int MethodDecl = 27;
  /** RegularExpression Id. */
  int MethodDeclList = 28;
  /** RegularExpression Id. */
  int Neg = 29;
  /** RegularExpression Id. */
  int NewArray = 30;
  /** RegularExpression Id. */
  int NewObj = 31;
  /** RegularExpression Id. */
  int Not = 32;
  /** RegularExpression Id. */
  int ObjType = 33;
  /** RegularExpression Id. */
  int Print = 34;
  /** RegularExpression Id. */
  int PrintVisitor = 35;
  /** RegularExpression Id. */
  int Program = 36;
  /** RegularExpression Id. */
  int Relop = 37;
  /** RegularExpression Id. */
  int Return = 38;
  /** RegularExpression Id. */
  int Stmt = 39;
  /** RegularExpression Id. */
  int StmtList = 40;
  /** RegularExpression Id. */
  int Text = 41;
  /** RegularExpression Id. */
  int This = 42;
  /** RegularExpression Id. */
  int True = 43;
  /** RegularExpression Id. */
  int Type = 44;
  /** RegularExpression Id. */
  int TypeVI = 45;
  /** RegularExpression Id. */
  int VarDecl = 46;
  /** RegularExpression Id. */
  int VarDeclList = 47;
  /** RegularExpression Id. */
  int VoidVI = 48;
  /** RegularExpression Id. */
  int While = 49;
  /** RegularExpression Id. */
  int NullType = 50;
  /** RegularExpression Id. */
  int NullStmt = 51;
  /** RegularExpression Id. */
  int NullExp = 52;
  /** RegularExpression Id. */
  int INT = 53;
  /** RegularExpression Id. */
  int STRING = 54;
  /** RegularExpression Id. */
  int LETTER = 55;
  /** RegularExpression Id. */
  int ID = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"ArrayElm\"",
    "\"ArrayLen\"",
    "\"ArrayType\"",
    "\"Assign\"",
    "\"BoolType\"",
    "\"Binop\"",
    "\"Block\"",
    "\"Call\"",
    "\"CallStmt\"",
    "\"ClassDecl\"",
    "\"ClassDeclList\"",
    "\"Exp\"",
    "\"ExpList\"",
    "\"False\"",
    "\"Formal\"",
    "\"FormalList\"",
    "\"Id\"",
    "\"If\"",
    "\"Int\"",
    "\"IntType\"",
    "\"Member\"",
    "\"MethodDecl\"",
    "\"MethodDeclList\"",
    "\"Neg\"",
    "\"NewArray\"",
    "\"NewObj\"",
    "\"Not\"",
    "\"ObjType\"",
    "\"Print\"",
    "\"PrintVisitor\"",
    "\"Program\"",
    "\"Relop\"",
    "\"Return\"",
    "\"Stmt\"",
    "\"StmtList\"",
    "\"Text\"",
    "\"This\"",
    "\"True\"",
    "\"Type\"",
    "\"TypeVI\"",
    "\"VarDecl\"",
    "\"VarDeclList\"",
    "\"VoidVI\"",
    "\"While\"",
    "\"NullType\"",
    "\"NullStmt\"",
    "\"NullExp\"",
    "<INT>",
    "<STRING>",
    "<LETTER>",
    "<ID>",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&&\"",
    "\"||\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
  };

}
