/* Generated By:JavaCC: Do not edit this line. astParser.java */
package astpsr;
import ast.*;
public class astParser implements astParserConstants {

  static final public Program Program() throws ParseException {
  ClassDeclList cl;
    jj_consume_token(57);
    jj_consume_token(Program);
    cl = astClassDeclList();
    jj_consume_token(58);
    jj_consume_token(0);
    {if (true) return new Program(cl);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclList astClassDeclList() throws ParseException {
  ClassDecl c; ClassDeclList cl = new ClassDeclList();
    jj_consume_token(57);
    jj_consume_token(ClassDeclList);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = astClassDecl();
                                           cl.add(c);
    }
    jj_consume_token(58);
    {if (true) return cl;}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl astClassDecl() throws ParseException {
  Exp e1, e2; VarDeclList vl; MethodDeclList ml;
    jj_consume_token(57);
    jj_consume_token(ClassDecl);
    e1 = astExp();
    e2 = astExp();
    vl = astVarDeclList();
    ml = astMethodDeclList();
    jj_consume_token(58);
    {if (true) return new ClassDecl((Id)e1,(Id)e2,vl,ml);}
    throw new Error("Missing return statement in function");
  }

  static final public VarDeclList astVarDeclList() throws ParseException {
  VarDecl v; VarDeclList vl = new VarDeclList();
    jj_consume_token(57);
    jj_consume_token(VarDeclList);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      v = astVarDecl();
                                       vl.add(v);
    }
    jj_consume_token(58);
    {if (true) return vl;}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl astVarDecl() throws ParseException {
  Type t; Exp e1, e2;
    jj_consume_token(57);
    jj_consume_token(VarDecl);
    t = astType();
    e1 = astExp();
    e2 = astExp();
    jj_consume_token(58);
    {if (true) return new VarDecl(t,(Id)e1,e2);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDeclList astMethodDeclList() throws ParseException {
  MethodDecl m; MethodDeclList ml = new MethodDeclList();
    jj_consume_token(57);
    jj_consume_token(MethodDeclList);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      m = astMethodDecl();
                                             ml.add(m);
    }
    jj_consume_token(58);
    {if (true) return ml;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl astMethodDecl() throws ParseException {
  Type t; Exp e; FormalList fl; VarDeclList vl; StmtList sl;
    jj_consume_token(57);
    jj_consume_token(MethodDecl);
    t = astType();
    e = astExp();
    fl = astFormalList();
    vl = astVarDeclList();
    sl = astStmtList();
    jj_consume_token(58);
    {if (true) return new MethodDecl(t,(Id)e,fl,vl,sl);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalList astFormalList() throws ParseException {
  Formal f; FormalList fl = new FormalList();
    jj_consume_token(57);
    jj_consume_token(FormalList);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      f = astFormal();
                                     fl.add(f);
    }
    jj_consume_token(58);
    {if (true) return fl;}
    throw new Error("Missing return statement in function");
  }

  static final public Formal astFormal() throws ParseException {
  Type t; Exp e;
    jj_consume_token(57);
    jj_consume_token(Formal);
    t = astType();
    e = astExp();
    jj_consume_token(58);
    {if (true) return new Formal(t,(Id)e);}
    throw new Error("Missing return statement in function");
  }

  static final public StmtList astStmtList() throws ParseException {
  Stmt s; StmtList sl = new StmtList();
    jj_consume_token(57);
    jj_consume_token(StmtList);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      s = astStmt();
                                 sl.add(s);
    }
    jj_consume_token(58);
    {if (true) return sl;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpList astExpList() throws ParseException {
  Exp e; ExpList el = new ExpList();
    jj_consume_token(57);
    jj_consume_token(ExpList);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      e = astExp();
                               el.add(e);
    }
    jj_consume_token(58);
    {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  static final public Type astType() throws ParseException {
  Type t; Exp e;
    jj_consume_token(57);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntType:
      jj_consume_token(IntType);
                              t = new IntType();
      break;
    case BoolType:
      jj_consume_token(BoolType);
                              t = new BoolType();
      break;
    case ObjType:
      jj_consume_token(ObjType);
      e = astExp();
                              t = new ObjType((Id)e);
      break;
    case ArrayType:
      jj_consume_token(ArrayType);
      t = astType();
                              t = new ArrayType(t);
      break;
    case NullType:
      jj_consume_token(NullType);
                              t = null;
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(58);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt astStmt() throws ParseException {
  Exp e1, e2; Stmt s, s1, s2; ExpList el; StmtList sl;
    jj_consume_token(57);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Block:
      jj_consume_token(Block);
      sl = astStmtList();
                                       s = new Block(sl);
      break;
    case Assign:
      jj_consume_token(Assign);
      e1 = astExp();
      e2 = astExp();
                                       s = new Assign(e1,e2);
      break;
    case CallStmt:
      jj_consume_token(CallStmt);
      e1 = astExp();
      e2 = astExp();
      el = astExpList();
                                       s = new CallStmt(e1,(Id)e2,el);
      break;
    case If:
      jj_consume_token(If);
      e1 = astExp();
      s1 = astStmt();
      s2 = astStmt();
                                       s = new If(e1,s1,s2);
      break;
    case While:
      jj_consume_token(While);
      e1 = astExp();
      s1 = astStmt();
                                       s = new While(e1,s1);
      break;
    case Print:
      jj_consume_token(Print);
      e1 = astExp();
                                       s = new Print(e1);
      break;
    case Return:
      jj_consume_token(Return);
      e1 = astExp();
                                       s = new Return(e1);
      break;
    case NullStmt:
      jj_consume_token(NullStmt);
                                       s = null;
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(58);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public int binOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
             {if (true) return ast.Binop.ADD;}
      break;
    case 60:
      jj_consume_token(60);
             {if (true) return ast.Binop.SUB;}
      break;
    case 61:
      jj_consume_token(61);
             {if (true) return ast.Binop.MUL;}
      break;
    case 62:
      jj_consume_token(62);
             {if (true) return ast.Binop.DIV;}
      break;
    case 63:
      jj_consume_token(63);
             {if (true) return ast.Binop.AND;}
      break;
    case 64:
      jj_consume_token(64);
             {if (true) return ast.Binop.OR;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public int relOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 65:
      jj_consume_token(65);
             {if (true) return ast.Relop.EQ;}
      break;
    case 66:
      jj_consume_token(66);
             {if (true) return ast.Relop.NE;}
      break;
    case 67:
      jj_consume_token(67);
             {if (true) return ast.Relop.LT;}
      break;
    case 68:
      jj_consume_token(68);
             {if (true) return ast.Relop.LE;}
      break;
    case 69:
      jj_consume_token(69);
             {if (true) return ast.Relop.GT;}
      break;
    case 70:
      jj_consume_token(70);
             {if (true) return ast.Relop.GE;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp astExp() throws ParseException {
  Type t; Token n; int op, size; Exp e, e1, e2; ExpList el;
    jj_consume_token(57);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ArrayElm:
      jj_consume_token(ArrayElm);
      e1 = astExp();
      e2 = astExp();
                                  e = new ArrayElm(e1,e2);
      break;
    case ArrayLen:
      jj_consume_token(ArrayLen);
      e1 = astExp();
                                  e = new ArrayLen(e1);
      break;
    case Binop:
      jj_consume_token(Binop);
      op = binOp();
      e1 = astExp();
      e2 = astExp();
                                  e = new Binop(op,e1,e2);
      break;
    case Call:
      jj_consume_token(Call);
      e1 = astExp();
      e2 = astExp();
      el = astExpList();
                                    e = new Call(e1,(Id)e2,el);
      break;
    case False:
      jj_consume_token(False);
                                  e = new Bool(0);
      break;
    case Id:
      jj_consume_token(Id);
      n = jj_consume_token(ID);
                                  e = new Id(n.image);
      break;
    case Int:
      jj_consume_token(Int);
      n = jj_consume_token(INT);
                                  e = new Int(Integer.parseInt(n.image));
      break;
    case Member:
      jj_consume_token(Member);
      e1 = astExp();
      e2 = astExp();
                                  e = new Member(e1,(Id)e2);
      break;
    case Neg:
      jj_consume_token(Neg);
      e1 = astExp();
                                  e = new Neg(e1);
      break;
    case NewArray:
      jj_consume_token(NewArray);
      t = astType();
      e1 = astExp();
                                  e = new NewArray((Type)t,(Int)e1);
      break;
    case NewObj:
      jj_consume_token(NewObj);
      e1 = astExp();
      el = astExpList();
                                  e = new NewObj((Id)e1,el);
      break;
    case Not:
      jj_consume_token(Not);
      e1 = astExp();
                                  e = new Not(e1);
      break;
    case Relop:
      jj_consume_token(Relop);
      op = relOp();
      e1 = astExp();
      e2 = astExp();
                                  e = new Relop(op,e1,e2);
      break;
    case Text:
      jj_consume_token(Text);
      n = jj_consume_token(STRING);
                                  String s = n.image;
                                  e = new Text(s.substring(1,s.length()-1));
      break;
    case This:
      jj_consume_token(This);
                                  e = new This();
      break;
    case True:
      jj_consume_token(True);
                                  e = new Bool(1);
      break;
    case NullExp:
      jj_consume_token(NullExp);
                                  e = null;
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(58);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public astParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x2000500,0x805200,0x0,0x0,0xe54828c0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2000000,0x2000000,0x2000000,0x2000000,0x2000000,0x2000000,0x40002,0xa0044,0xf8000000,0x0,0x100e21,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x7e,0x0,};
   }

  /** Constructor with InputStream. */
  public astParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public astParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new astParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public astParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new astParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public astParser(astParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(astParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[71];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 71; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
