/* Generated By:JavaCC: Do not edit this line. miniParser.java */
package parser;
import ast.*;
import java.lang.*;

public class miniParser implements miniParserConstants {

  static final public Program Program() throws ParseException {
        ClassDeclList list1 = new ClassDeclList();
        ClassDecl cl;
    cl = ClassDecl();
                           list1.add(cl);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      cl = ClassDecl();
                                                                list1.add(cl);
    }
    jj_consume_token(0);
         {if (true) return new Program(list1);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDecl() throws ParseException {
        Id parentID = null, classID = null;
        VarDeclList varList = new VarDeclList();
        VarDecl var;
        MethodDeclList methList = new MethodDeclList();
        MethodDecl meth;
    jj_consume_token(CLASS);
    classID = ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      parentID = ID();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(L_CURLY_BRACKET);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      var = VarDecl();
                                                                                    varList.add(var);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      meth = MethodDecl();
                                                                                                                                methList.add(meth);
    }
    jj_consume_token(R_CURLY_BRACKET);
         {if (true) return new ClassDecl(classID, parentID, varList, methList);}
    throw new Error("Missing return statement in function");
  }

  static final public Id ID() throws ParseException {
        parser.Token idName = null;
        Id token = null;;
    idName = jj_consume_token(ID);
                       token = new Id(idName.toString());
         {if (true) return token;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDecl() throws ParseException {
        Type t = null;
        Id name = null;
        Id name2 = null;
        FormalList form = null;
        VarDeclList varList = new VarDeclList();
        VarDecl var = null;
        StmtList sList = new StmtList();
        Stmt s = null;
    jj_consume_token(PUBLIC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
    case VOID:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case ID:
        t = Type();
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      name = ID();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case ID:
        form = Formals();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
    case STATIC:
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
                                  name = new Id("main");
      jj_consume_token(LPAREN);
      jj_consume_token(STRING);
      jj_consume_token(L_SQUARE_BRACKET);
      jj_consume_token(R_SQUARE_BRACKET);
      name2 = ID();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(L_CURLY_BRACKET);
    label_4:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_4;
      }
      var = VarDecl();
                                                                                                                                                                                                    varList.add(var);
    }
    label_5:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_5;
      }
      s = Statement();
                                       sList.add(s);
    }
    jj_consume_token(R_CURLY_BRACKET);
         {if (true) return new MethodDecl(t, name, form, varList, sList);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalList Formals() throws ParseException {
        Type varType;
        Id varName;
        Formal form;
        FormalList formList = new FormalList();
    varType = Type();
    varName = ID();
                                        formList.add(new Formal(varType, varName));
    label_6:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(COMMA);
      varType = Type();
      varName = ID();
                                                                                                                                        formList.add(new Formal(varType, varName));
    }
         {if (true) return formList;}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDecl() throws ParseException {
        Type varType = null;
        Id varName = null;
        Exp expression = null;
    varType = Type();
    varName = ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      expression = FullExpr();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(DELIMITER);
         {if (true) return new VarDecl(varType, varName, expression);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
        Type varType = null;
        Type arrayType = null;
        Id objName = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      objName = ID();
                         varType = new ObjType(objName);
      break;
    case BOOLEAN:
    case INT:
      varType = ElmType();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_SQUARE_BRACKET:
      jj_consume_token(L_SQUARE_BRACKET);
      jj_consume_token(R_SQUARE_BRACKET);
                                                                                          arrayType = new ArrayType(varType);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
         {if (true) return arrayType==null ? varType : arrayType;}
    throw new Error("Missing return statement in function");
  }

  static final public Type ElmType() throws ParseException {
        Type t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                     t = new BoolType();
      break;
    case INT:
      jj_consume_token(INT);
                 t = new IntType();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

//********************************
  static final public Stmt Statement() throws ParseException {
        Block codeBlock = null;
        Stmt stmtList = null;
        StmtList list = new StmtList();
        Exp e = null;
        Exp e2 = null;
        ExpList eList = null;
        Stmt statement = null;
        Stmt statement2 = null;
        boolean methodCall = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_CURLY_BRACKET:
      jj_consume_token(L_CURLY_BRACKET);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case RETURN:
        case THIS:
        case WHILE:
        case SYSTEM_OUT_PRINTLN:
        case ID:
        case L_CURLY_BRACKET:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
        statement = Statement();
                list.add(statement);
      }
      jj_consume_token(R_CURLY_BRACKET);
                                             codeBlock = new Block(list);
      break;
    case THIS:
    case ID:
      e = Lvalue();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        e2 = FullExpr();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case THIS:
        case TRUE:
        case ID:
        case NUM:
        case MINUS:
        case NOT:
        case LPAREN:
          eList = Args();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
                                                                            methodCall = true;
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DELIMITER);
                if(e2!=null)
                {
                        statement = new Assign(e, e2);
                        {if (true) return statement;}
                }
                else if(methodCall == true)
                {
                        if(eList == null)
                                eList = new ExpList();
                        if( e instanceof ast.Member)
                                statement = new CallStmt(((Member)e).obj, ((Member)e).var, eList);
                        else if( e instanceof ast.Id)
                                statement = new CallStmt((Exp)new This(), (Id)e, eList);

                        {if (true) return statement;}
                }
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
      statement = Statement();
      if (jj_2_4(2)) {
        jj_consume_token(ELSE);
        statement2 = Statement();
      } else {
        ;
      }
                                                                                                            statement = new If(e, statement, statement2);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
      statement = Statement();
                                                               statement = new While(e, statement);
      break;
    case SYSTEM_OUT_PRINTLN:
      jj_consume_token(SYSTEM_OUT_PRINTLN);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case THIS:
      case TRUE:
      case STRING_LITERAL:
      case ID:
      case NUM:
      case MINUS:
      case NOT:
      case LPAREN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case THIS:
        case TRUE:
        case ID:
        case NUM:
        case MINUS:
        case NOT:
        case LPAREN:
          e = Expr();
          break;
        case STRING_LITERAL:
          e = String_Literal();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
                                                                           statement = new Print(e);
      jj_consume_token(RPAREN);
      jj_consume_token(DELIMITER);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case THIS:
      case TRUE:
      case ID:
      case NUM:
      case MINUS:
      case NOT:
      case LPAREN:
        e = Expr();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(DELIMITER);
                                      statement = new Return(e);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(codeBlock != null)
                {
                        {if (true) return codeBlock;}
                }
                else  if( statement != null)
                        {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt MethodCall() throws ParseException {
        Exp e = null;
        ExpList eList = null;
        Stmt statement = null;
        boolean method = false;
    e = Expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      eList = Args();
      jj_consume_token(RPAREN);
                                             method = true;
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
                if(method = false)
                        statement = new Print(e);
                else
                        statement = new Print(new Call( ((Member) e).obj, ((Member) e).var, eList));
                {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public Text String_Literal() throws ParseException {
        parser.Token str = null;
        Text t = null;
    str = jj_consume_token(STRING_LITERAL);
                                t = new Text(str.toString());
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpList Args() throws ParseException {
        Exp expression;
        ExpList eList = new ExpList();
    expression = Expr();
                             eList.add(expression);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      expression = Expr();
                                                                               eList.add(expression);
    }
         {if (true) return eList;}
    throw new Error("Missing return statement in function");
  }

//**********************************************
  static final public Exp FullExpr() throws ParseException {
        Int num = null;
        Type t = null;
        NewArray array = null;
        Exp e = null;
        Id objName = null;
        ExpList eList = null;
        NewObj obj = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
        t = ElmType();
        jj_consume_token(L_SQUARE_BRACKET);
        num = NUM();
        jj_consume_token(R_SQUARE_BRACKET);
                                                    array = new NewArray(t, num);
        break;
      case ID:
        objName = ID();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case L_SQUARE_BRACKET:
          jj_consume_token(L_SQUARE_BRACKET);
          num = NUM();
          jj_consume_token(R_SQUARE_BRACKET);
                                       array = new NewArray(new ObjType(objName), num);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FALSE:
          case THIS:
          case TRUE:
          case ID:
          case NUM:
          case MINUS:
          case NOT:
          case LPAREN:
            eList = Args();
            break;
          default:
            jj_la1[20] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
                                              obj = new NewObj(objName, eList);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case FALSE:
    case THIS:
    case TRUE:
    case ID:
    case NUM:
    case MINUS:
    case NOT:
    case LPAREN:
      e = Expr();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         if(array != null)
                {if (true) return array;}
        else if(obj != null)
                {if (true) return obj;}
        else if( e != null)
                {if (true) return e;}
        else
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Expr() throws ParseException {
        Exp e1 = null, e2 = null;
    e1 = AndExpr();
    e2 = OrTail(e1);
         {if (true) return (e2 == null) ? e1:e2;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp OrTail(Exp e0) throws ParseException {
        Exp e1 = null, e2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      e1 = AndExpr();
                             e1 = new Binop(Binop.OR,e0,e1);
      e2 = OrTail(e1);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
         {if (true) return (e2 == null) ? e1:e2;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp AndExpr() throws ParseException {
        Exp e1 = null, e2 = null;
    e1 = RelExpr();
    e2 = AndTail(e1);
         {if (true) return (e2 == null) ? e1:e2;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp AndTail(Exp e0) throws ParseException {
        Exp e1 = null, e2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      e1 = RelExpr();
                              e1 = new Binop(Binop.AND, e0,e1);
      e2 = AndTail(e1);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
         {if (true) return (e2 == null) ? e1:e2;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp RelExpr() throws ParseException {
        Exp e1 = null, e2 = null;
        Relop rel = null;
    e1 = ArithExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQL:
    case NOT_EQL:
    case LESS_THAN:
    case GREATER_OR_EQL:
    case GRETER_THAN:
    case GRETER_OR_EQL:
      rel = RelOp();
      e2 = ArithExpr();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
         if(rel != null)
                if(e1 != null)
                        rel.e1 = e1;
                if(e2 != null)
                        rel.e2 = e2;
         /*System.out.println("RelExpr");*/{if (true) return (e2 != null) ? rel:e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ArithExpr() throws ParseException {
        Exp e1 = null, e2 = null;
    e1 = Term();
    e2 = ArithTail(e1);
         /*System.out.println("ArithExpr");*/{if (true) return (e2 == null) ? e1:e2;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ArithTail(Exp e0) throws ParseException {
        Exp e1 = null, e2 = null;
        int add = Binop.ADD;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
                      add = Binop.SUB;
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e1 = Term();
                       e1 = new Binop(add, e0, e1);
      e2 = ArithTail(e1);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
         {if (true) return (e2 == null) ? e1:e2;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Term() throws ParseException {
        Exp e1 = null, e2 = null;
    e1 = Factor();
    e2 = TermTail(e1);
         {if (true) return (e2 == null) ? e1:e2;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp TermTail(Exp e0) throws ParseException {
        Exp e1 = null, e2 = null;
        int mult = Binop.MUL;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
    case DIV:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
        break;
      case DIV:
        jj_consume_token(DIV);
                      mult = Binop.DIV;
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e1 = Factor();
                         e1 = new Binop(mult, e0, e1);
      e2 = TermTail(e1);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
         {if (true) return (e2 == null) ? e1:e2;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Factor() throws ParseException {
        Exp e1 = null, e2 = null;
        boolean NEG = true;
        ArrayLen al = null;
        Call function = null;
        ExpList eList = null;
        This thisPointer = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case NOT:
        jj_consume_token(NOT);
                    NEG = false;
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e1 = Factor();
                                                 if(NEG == true) e1 = new Neg(e1); else e1 = new Not(e1);
      break;
    case THIS:
    case ID:
      e1 = Lvalue();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PERIOD:
      case LPAREN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PERIOD:
          jj_consume_token(PERIOD);
          jj_consume_token(LENGTH);
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
                                               al = new ArrayLen(e1);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FALSE:
          case THIS:
          case TRUE:
          case ID:
          case NUM:
          case MINUS:
          case NOT:
          case LPAREN:
            eList = Args();
            break;
          default:
            jj_la1[32] = jj_gen;
            ;
          }
                if(e1 instanceof ast.Member)
                        function = new Call(((Member)e1).obj, ((Member)e1).var, eList);

                else if(e1 instanceof ast.Id)
                        function = new Call((Exp)( new This()),(Id) e1, eList);
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      e1 = Expr();
      jj_consume_token(RPAREN);
      break;
    case FALSE:
    case TRUE:
    case NUM:
      e1 = Literal();
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(function != null)
                        {if (true) return function;}
                else if(al != null)
                        {if (true) return al;}
                else
                        {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Lvalue() throws ParseException {
        This thisPointer = null;
        Member mem = null;
        Id memberName = null;
        Id innerMemberName = null;
        ArrayElm element = null;
        Exp indexExpr = null;
        Exp retVal = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
      jj_consume_token(PERIOD);
                     thisPointer = new This();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    memberName = ID();
          if(thisPointer != null)
                retVal = new Member(thisPointer, memberName);
          else
                retVal = memberName;
    label_9:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_SQUARE_BRACKET:
        jj_consume_token(L_SQUARE_BRACKET);
        indexExpr = Expr();
        jj_consume_token(R_SQUARE_BRACKET);
                                                  retVal = new ArrayElm(memberName, indexExpr);
        break;
      case PERIOD:
        jj_consume_token(PERIOD);
        innerMemberName = ID();
                                          indexExpr = null; retVal = new Member(memberName, innerMemberName);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Literal() throws ParseException {
        Int i = null;
        Bool b = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      i = NUM();
      break;
    case TRUE:
      jj_consume_token(TRUE);
                             b = new Bool(1);
      break;
    case FALSE:
      jj_consume_token(FALSE);
                                                          b = new Bool(0);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return (i!=null) ? i:b;}
    throw new Error("Missing return statement in function");
  }

  static final public Int NUM() throws ParseException {
        parser.Token num = null;
        Int i = null;
    num = jj_consume_token(NUM);
                     i = new Int(Integer.parseInt(num.toString()));
         {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  static final public Relop RelOp() throws ParseException {
        Relop rel = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQL:
      jj_consume_token(EQL);
              rel = new Relop(Relop.EQ, null, null);
      break;
    case NOT_EQL:
      jj_consume_token(NOT_EQL);
                rel = new Relop(Relop.NE, null, null);
      break;
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
               rel = new Relop(Relop.LT, null, null);
      break;
    case GREATER_OR_EQL:
      jj_consume_token(GREATER_OR_EQL);
                rel = new Relop(Relop.LE, null, null);
      break;
    case GRETER_THAN:
      jj_consume_token(GRETER_THAN);
               rel = new Relop(Relop.GT, null, null);
      break;
    case GRETER_OR_EQL:
      jj_consume_token(GRETER_OR_EQL);
                rel = new Relop(Relop.GE, null, null);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return rel;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_36() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(L_SQUARE_BRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_scan_token(DELIMITER)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(SYSTEM_OUT_PRINTLN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(L_CURLY_BRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(R_CURLY_BRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(L_SQUARE_BRACKET)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public miniParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x400,0x20002080,0x20000,0x20402080,0x20002080,0x20482080,0x0,0x20002080,0x0,0x2080,0x22941000,0x60300800,0x0,0x64300800,0x64300800,0x60300800,0x22941000,0x0,0x0,0x60300800,0x0,0x20002080,0x60310800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60300800,0x0,0x0,0x60300800,0x100000,0x0,0x40200800,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x80000,0x0,0x200000,0x20084,0x20001,0x20084,0x20084,0x20084,0x200000,0x20000,0x8000,0x20084,0xa0000,0x0,0x20084,0x40,0x20,0x3f00,0x6,0x6,0x18,0x18,0x84,0x20084,0x30000,0x30000,0x20084,0x0,0x90000,0x0,0x3f00,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public miniParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public miniParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new miniParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public miniParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new miniParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public miniParser(miniParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(miniParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                        }
